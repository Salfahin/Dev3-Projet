meta {
  name: getCaseFans
  type: http
  seq: 9
}

get {
  url: http://188.166.38.93:3001/api/parts/case_fans
  body: none
  auth: inherit
}

tests {
  // 1. Status code check
  test("should return 200 OK", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Response should be an array
  test("response should be an array", function () {
    const fans = res.getBody();
    expect(fans).to.be.an("array");
    expect(fans.length).to.be.greaterThan(0);
  });
  
  // 3. Each fan has required fields
  test("each fan should have id, type, name, manufacturer, price, specifications", function () {
    const fans = res.getBody();
    fans.forEach(f => {
      expect(f).to.have.property("id");
      expect(f).to.have.property("type");
      expect(f).to.have.property("name");
      expect(f).to.have.property("manufacturer");
      expect(f).to.have.property("price");
      expect(f).to.have.property("specifications");
    });
  });
  
  // 4. type should equal 8 for all fans
  test("type should equal 8 for all fans", function () {
    const fans = res.getBody();
    fans.forEach(f => {
      expect(f.type).to.equal(8);
    });
  });
  
  // 5. price should be >= 0
  test("price should be >= 0", function () {
    const fans = res.getBody();
    fans.forEach(f => {
      expect(f.price).to.be.a("number");
      expect(f.price).to.be.greaterThanOrEqual(0);
    });
  });
  
  // 6. specifications should be an object with string values
  test("specifications should be an object with string values", function () {
    const fans = res.getBody();
    fans.forEach(f => {
      expect(f.specifications).to.be.an("object");
      Object.values(f.specifications).forEach(v => {
        expect(typeof v === "string").to.equal(true);
      });
    });
  });
  
  // 7. Each fan should include a 'Size' and 'Airflow' field
  test("each fan should have 'Size' and 'Airflow' in specifications", function () {
    const fans = res.getBody();
    fans.forEach(f => {
      expect(f.specifications).to.have.property("Size");
      expect(f.specifications).to.have.property("Airflow");
    });
  });
  
}

settings {
  encodeUrl: true
}
