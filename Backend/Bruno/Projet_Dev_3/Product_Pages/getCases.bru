meta {
  name: getCases
  type: http
  seq: 8
}

get {
  url: http://188.166.38.93:3001/api/parts/cases
  body: none
  auth: inherit
}

tests {
  // 1. Status code check
  test("should return 200 OK", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Response should be an array
  test("response should be an array", function () {
    const body = res.getBody();
    expect(body).to.be.an("array");
    expect(body.length).to.be.greaterThan(0);
  });
  
  // 3. Each case has required fields
  test("each case should have id, type, name, manufacturer, price, specifications", function () {
    const cases = res.getBody();
    cases.forEach(c => {
      expect(c).to.have.property("id");
      expect(c).to.have.property("type");
      expect(c).to.have.property("name");
      expect(c).to.have.property("manufacturer");
      expect(c).to.have.property("price");
      expect(c).to.have.property("specifications");
    });
  });
  
  // 4. type should equal 7 for all cases
  test("type should equal 7 for all cases", function () {
    const cases = res.getBody();
    cases.forEach(c => {
      expect(c.type).to.equal(7);
    });
  });
  
  // 5. price should be null or >= 0
  test("price should be null or >= 0", function () {
    const cases = res.getBody();
    cases.forEach(c => {
      if (c.price !== null) {
        expect(c.price).to.be.a("number");
        expect(c.price).to.be.greaterThanOrEqual(0);
      }
    });
  });
  
  // 6. specifications should be an object with string values
  test("specifications should be an object with string values", function () {
    const cases = res.getBody();
    cases.forEach(c => {
      expect(c.specifications).to.be.an("object");
      Object.values(c.specifications).forEach(v => {
        expect(v === null || typeof v === "string").to.equal(true);
      });
    });
  });
  
  // 7. Each case must have a 'Type' field in specifications
  test("each case must have 'Type' in specifications", function () {
    const cases = res.getBody();
    cases.forEach(c => {
      expect(c.specifications).to.have.property("Type");
      expect(c.specifications.Type).to.be.a("string");
      expect(c.specifications.Type.length).to.be.greaterThan(0);
    });
  });
  
}

settings {
  encodeUrl: true
}
