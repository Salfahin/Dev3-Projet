meta {
  name: getProcessors
  type: http
  seq: 2
}

get {
  url: http://188.166.38.93:3001/api/parts/processors
  body: none
  auth: inherit
}

tests {
  // 1. Status Code Check
  test("should return 200 OK", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  // 2. Response is an Array
  test("response should be an array", function () {
    const body = res.getBody();
    expect(body).to.be.an("array");
    expect(body.length).to.be.greaterThan(0);
  });
  
  // 3. Each processor has required fields
  test("each processor should have id, type, name, manufacturer, price, specifications", function () {
    const processors = res.getBody();
    processors.forEach(p => {
      expect(p).to.have.property("id");
      expect(p).to.have.property("type");
      expect(p).to.have.property("name");
      expect(p).to.have.property("manufacturer");
      expect(p).to.have.property("price");
      expect(p).to.have.property("specifications");
    });
  });
  
  // 4. id should be positive numbers
  test("id should be positive numbers", function () {
    const processors = res.getBody();
    processors.forEach(p => {
      expect(p.id).to.be.a("number");
      expect(p.id).to.be.greaterThan(0);
    });
  });
  
  // 5. type should equal 0 for all processors
  test("type should equal 0 for all processors", function () {
    const processors = res.getBody();
    processors.forEach(p => {
      expect(p.type).to.equal(0);
    });
  });
  
  // 6. price should be null or a non-negative number
  test("price should be null or >= 0", function () {
    const processors = res.getBody();
    processors.forEach(p => {
      if (p.price !== null) {
        expect(p.price).to.be.a("number");
        expect(p.price).to.be.greaterThanOrEqual(0);
      }
    });
  });
  
  // 7. specifications should be an object
  test("specifications should be an object with string values", function () {
    const processors = res.getBody();
    processors.forEach(p => {
      expect(p.specifications).to.be.an("object");
      Object.values(p.specifications).forEach(v => {
        expect(v === null || typeof v === "string").to.equal(true);
      });
    });
  });
  
}

settings {
  encodeUrl: true
}
